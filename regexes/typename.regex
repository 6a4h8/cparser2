#include "main.regex", "inner.regex", "unary.regex", "binary.regex", "primexpr.regex"
#entry ^cprogram

(?<typenamequalifs>(?<qualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(\bvoid\b|\bint\b|\bchar\b|\bshort\b|\blong\b
						|\bsigned\b|\bunsigned\b|\bfloat\b|\bdouble\b)|
						(?<qualifiers>\bconst\b|\brestrict\b|\bvolatile\b)
						|(?<storageclass>\bextern\b|\bstatic\b|\bauto\b|\bregister\b))
						(?{call add_type_or_qualifier})\s*+))|(?&structorunion)
						|(?&identifierminetypedef))

(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<align>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<typenamequalifsfacet>(?<facet>)(?&typenamequalifs))

(?<typename>\s*+[(](?=(?&typenamequalifsfacet)++(?{call identifier_decl})
						(?<abstrdeclopt>(?&abstdecloptoutter)?+)(?{call enddeclaration}))
						(?&typenamequalifs)++
						\g{abstrdeclopt}[)](?{call endqualifs})\s*+)

(?<allqualifsparam>\s*+(?&qualifs)\s*+|(?&structorunion)|(?<tpdflocal>(?(<tpdflocal>)(*F)|(?&identifierminetypedef))))

(?<allqualifsdecl>(?&allqualifsparam)|\s*+(\btypedef\b)\s*+)

(?<abstrmostoutteropt>\s*+(?&callingconv)?+[(](?&abstdecloptoutter)[)]\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+([(](?&abstdecloutter)[)]|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?(?=(?&abstrsubsfacet))(?{call identifier_decl})(?&abstrsubs)
			|([(](?&abstdecloutterparams)[)]
			|(?&identifierminedecl)
			|(?{call identifier_decl})))\s*+)

(?<identifierminedecl>\s*+(?!(?&keywordlistfacet))(?<ident>(?&identifierrawfacet))
	(?(<compound>)(?{call identifier_decl})
	(?{call identifier_decl})\s*+))

(?#<Tabstrrest, Tabstrrestalt, Tinside>)

(?<Tabstrrest>
	(?(R&abstdecloptoutter)(?&abstrmostoutteroptfacet)?+(?&abstrsubsfacet)*+)
	(?(R&abstdecloutter)(?&abstrmostoutterfacet)(?&abstrsubsfacet)*+)
	(?(R&abstdecloutterparams)(?&abstrmostoutterparamsfacet)(?&abstrsubsfacet)*+)
	)

(?<Tabstrrestalt>
	(?(R&abstdecloptoutter)((?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++))
	(?(R&abstdecloutter)(?&abstrmostoutter)(?&abstrsubs)*+)
	(?(R&abstdecloutterparams)(?&abstrmostoutterparams)(?&abstrsubs)*+)
	)

(?<Tinside>
	(?(R&abstdecloptoutter)(?&abstrmostoutteropt)?+)
	(?(R&abstdecloutter)(?&abstrmostoutter))
	(?(R&abstdecloutterparams)(?&abstrmostoutterparams))
	)

(?<abstdecl>(?(<facet>)(?&abstrptr)(?&abstrptr)*+(?&Tabstrrest)
						|(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&qualifiers))*+)
						(?!(?&abstrptrrev)(?{call addptrtotype}))
						(?<abstrrest>(?&Tinside)(?<abstrsubs>\s*+(\[(?{call beginconstantexpr})(?&primexpr)\]
						(?{call addsubtotype})(?{call endconstantexpr})
						|[(](?{call startfunctionparamdecl})(\s*+\bvoid\b\s*+|(((?&typenameinsideparams))?+
						(,(?&typenameinsideparams))*(?<rest>,\s*+\.\.\.\s*+)?+))[)](?{call endfunctionparamdecl}))\s*+)*+
						(?{call addptrtotype}))|
						(?&abstrptr))(?&abstrptr)*+(?&Tabstrrest))|(?&Tabstrrestalt))

(?<abstdecloptoutter>(?&abstdecl))

(?<abstdecloutter>(?&abstdecl))

(?<abstdecloutterparams>(?&abstdecl))

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tasbtdecloutter>
	(?(R&typenameinsideparams)(?&abstdecloutterparams)|(?&abstdecloutter))
	)

(?<Tabstinitorbitfl>
	(?(R&typenamebitfl)(?&abstrbitfield)|(?(R&typenameinsideparams)(*F)|(?&abstrinitialization)))
	)

(?<Tdecl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?+)

(?<Tabsqualifs>
	(?(R&extrnl_def)(?&allqualifsdecl)*+|(?(R&typenameinsideparams)(?&allqualifsparam)++|(?&allqualifsdecl)++))
	)

(?#<Tabsqualifs, Tdecl, Tidentifierminetypedef, Tidentifierminetypedeffwd, Tqualifwrapper>)
(?<abstdeclorallqualifsbasic>
	(?(<facet>)(?&Tabsqualifsfacet)(?&Tdeclfacet)|
	(?=(?&Tabsqualifsfacet)(?<rest>(?&Tdecl))(?{call enddeclaration}))
				(?&Tabsqualifs)\g{rest}(?{call endqualifs})
))

(?<declcomma>,(?&Tdecl))

(?<declcommafacet>,(?&Tdeclfacet))

(?#<Tabsqualifs, Tasbtdecloutter, Tabstinitorbitfl, Tidentifierminetypedef, Tidentifierminetypedeffwd, Tqualifwrapper>)
(?<abstdeclorallqualifs>
		(?(<facet>)(?&Tabsqualifsfacet)(?&Tdeclfacet)(?&declcommafacet)*+|
		(?<restoutter>(?=\g{Tabsqualifs}
				(?<rest>(?(<rest>)\g{rest},)(?&Tdecl)(?{call enddeclaration})))
				((?&Tabsqualifs)\g{rest}(?{call endqualifs})
				|(?&restoutter)))
				))

(?<decl>(?!(?(?!(?&structorunion)(?<fill>\s*+;\s*+))(?&abstdeclorallqualifsbasic)
	(?=(?<compound>(?&compoundstatement)))(*F)|(*F)))
	(?(<compound>)(?&abstdeclorallqualifsbasicfacet)\g{compound}
	|(?(<structbody>)\g{structbody}\g{fill}|(?&abstdeclorallqualifs))\s*+;(?{call endfulldecl})\s*+))

(?<declsbb>(?&decl))

(?<extrnl_def>(?&decl))

(?<typenamebitfl>(?&decl))

(?<typenameinsideparams>(?&decl))

(?<cprogram>(?&extrnl_def)*+)

(?<identifierminetypedef>\s*+\b((??{identifier_typedef}))\b\s*+)

(?<keywordlist>(?&typesandqualifiersmask)
	|\b(typedef|struct|enum|sizeof|break|case|continue|default|do|else|for|goto|if|return|switch|while)\b)

(?<typenamerev>(?(<facet>)(*F))((?&typenamefacet)(?!(?&castexpr)))|(?&typename)(?{call applycast})(?&castexprfacet))


(?<abstrbitfield>\s*+:\s*+(?{call beginconstantexpr})(?&assignorsomething)(?{call endconstantexpr}))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<add_ident_to_enum_def>\s*+(?!(?&keywordlistfacet))(?<identlasttag>(?&identifierrawfacet))(?{call add_ident_to_enum_def})\s*+)

(?<structbody>[{](?(<enum>)(?{call begin_enumerator_def})
	(?<enumerator>(?&add_ident_to_enum_def)
	((=(?{call beginconstantexpr})(?&assignorsomething)(?{call end_ass_to_enum_def}))
	|(?{call end_without_ass_to_enum_def})))?+(,(?&enumerator))*+,?+\s*+
	|(?{call struc_or_union_body})\s*+((?&typenamebitfl)\s*+;\s*+)*+)
	[}](?(<enum>)()|(?{call endbuildingstructorunion}))(?{call add_tag})\s*+)

(?<structorunion>\s*+(?<structorunionlast>struct|union|(?<enum>enum))(?&align)?+
	((?&identifierminestruct)?+\s*+(\g{structbody}(?{call add_tag})|(?&structbody))
	|(?&identifierminestruct)(?{call add_tag})))

(?<identifierminestruct>\s*+(?!(?&keywordlistfacet))((?&identifierrawfacet))\s*+)