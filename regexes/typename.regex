

(?<qualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(?&typeorqualif))\s*+))

(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<alignnum>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<typename>\s*+[(]

	(?(<strc>)(?{die "strc"}))
	(?(<typedefnmmatched>)(?{die "typedefnmmatched"}))
	(?(<typedefkey>)(?{die "typedefkey"}))

	(?(?=
		(?{push @savedcallouts, []})
		(?{++$recording})

		(((?&qualifs)|\s*+((?(<strc>)(*F))(?(<typedefnmmatched>)(*F))
		((?<strc>(?&structorunion))
		|(?<typedefnmmatched>(?&identifier_typedef))))
		|(?(<typedefkey>)(*F))(?<typedefkey>(\btypedef\b))\s*+)++))

		|(?{pop @savedcallouts})(?{--$recording})(*F))
		
	(?{--$recording})(?{push @flags, ["optoutter"]})
	
		(??{'\Q$^N\E'})(?{call 'identifier_decl'})(?&abstdecl)?+
		(?{call 'enddeclaration'})

		(?{pop @flags})
		(?{replayrecord})
		(?{pop @savedcallouts})

		[)](?{call 'endqualifs'})\s*+
		
)

(?<abstrmostoutteropt>\s*+(?&callingconv)?+[(](?&abstdecl(optoutter))[)]\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+([(](?&abstdecl(outter))[)]|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?(?=(?{push @flags, ["subsparams"]})
			(?<subs>(?&abstrsubs)))(?{pop @flags})\g{subs}
			|(?{pop @flags})((?(?=([(](?{push @flags, ["outterparams"]})(?&abstdecl)[)](?{pop @flags})))
			(??{'\Q$^N\E'})|(?{pop @flags})(*F))
			|(?&identifierminedecl)
			|(?{call 'identifier_decl'})))\s*+)

(?<identifierminedecl>\s*+(?<ident>(?&identifierraw_qualified))
	(?{call 'identifier_decl'})\s*+)

(?<Tabstrrestalt>
	(?(?{$flags[-1]->[outterparams]})(?&abstrmostoutterparams)(?&abstrsubs)*+
	|(?(?{$flags[-1]->[outter]})(?&abstrmostoutter)(?&abstrsubs)*+
	|(?(?{$flags[-1]->[optoutter]})((?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++))))
	)

(?<Tinside>
	(?(?{$flags[-1]->[outterparams]})(?&abstrmostoutterparams)
	|(?(?{$flags[-1]->[outter]})(?&abstrmostoutter)
	|(?(?{$flags[-1]->[optoutter]}))(?&abstrmostoutteropt)?+))
	))

(?<param>(?(?=((?{push @flags, ["insideparams", "bb"]})(?&abstdeclorallqualifs))(?{pop @flags}))(??{'\Q$^N\E'})|(?{pop @flags})(*F)))

(?<abstrsubs>\s*+(\[
						(?(?{$flags[-1]->[subsparams]})(?{call 'identifier_decl'}))
						(?{call 'beginconstantexpr'})(?&primexpr)\]
						(?{call 'addsubtotype'})(?{call 'endconstantexpr'})
						|[(](?(?{$flags[-1]->[subsparams]})(?{call 'identifier_decl'}))
						((?(?=(?{push @flags, ["firstparam", "nesteddecl"]})((?&param))(?{pop @flags}))(??{'\Q$^N\E'})|(?{pop @flags})(*F))
						(,(?(?=(?{push @flags, ["nesteddecl"]})((?&param))(?{pop @flags}))(??{'\Q$^N\E'})|(?{pop @flags})(*F)))*|(?{call 'startfunctionparamdecl'}))
						(?<rest>,?+\s*+\.\.\.\s*+)?+\s*+[)](?{call 'endfunctionparamdecl'}))\s*+)

(?<abstdecl>
		(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&typeorqualif))*+)
						(?(?!(?<foundabstr>(?&abstrptrrev))(?{call 'addptrtotype'}))
						(?<abstrrest>(?&Tinside)(?&abstrsubs)*+
						(?{call 'addptrtotype'}))|
						\g{foundabstr}))|(?&Tabstrrestalt))

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tasbtdecloutter>
	(?(?{$flags[-1]->[insideparams]})(?(?=(?{push @flags, ["outterparams"]})((?&abstdecl)))(??{'\Q$^N\E'})|(?{pop @flags})(*F))
	|(?&abstdecl(outter)))
	)

(?<Tabstinitorbitfl>
	(?(?{$flags[-1]->[bitfl]})(?&abstrbitfield)|(?&abstrinitialization))
	)

(?<Tdecl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?+)


(?<declcomma>,(?&Tdecl))

(?<abstdeclorallqualifs>

	(?(?=(?{push @savedcallouts, []})
		(?{++$recording})

		(?<Tqualifs>((?<typefound>(?&qualifs))|\s*+((?(<strc>)(*F))(?(<typedefnmmatched>)(*F))
		((?<strc>(?&structorunion))
		|(?(<typefound>)(*F))(?<typedefnmmatched>(?&identifier_typedef)))
		|(?(<typedefkey>)(*F))(?<typedefkey>(\btypedef\b)))\s*+)++
		|(?(<extnrl>)|(*F))))

		|(?{pop @savedcallouts})(?{--$recording})(*F))
	(?{--$recording})
	\g{Tqualifs}(?(?{$flags[-1]->[firstparam]})(?{call 'startfunctionparamdecl'}))
	(?(?=(?<declinner>(?&Tdecl)(?{call 'enddeclaration'})(?{replayrecord})(?{call 'endqualifs'})))\g{declinner}
	(?(?{$flags[-1]->[insideparams]})|(,(?&declinner))*+)|(?(<strc>)|(*F)))

	(?{pop @savedcallouts})
)

(?<decl>(?&abstdeclorallqualifs)((?&compoundstatement)|\s*+;(?{call 'endfulldecl'})\s*+))

(?<cprogram>(?&decl(extrnl))*+)

(?<typenamerev>(?=(?{push @savedcallouts, []})
		(?{++$recording})(?<typenamerev1>(?&typename))
		|(?{pop @savedcallouts})(?{--$recording})(*F))(?{--$recording})(?(?!((?&castexpr)))|\g{typenamerev1}(?{replayrecord})(?{call 'applycast'})(??{'\Q$^N\E'})))


(?<abstrbitfield>\s*+:\s*+(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'endconstantexpr'}))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<add_ident_to_enum_def>\s*+(?<identlasttag>(?&identifierraw_qualified))(?{call 'add_ident_to_enum_def'})\s*+)


(?<strcelem>(?(?=((?{push @flags, ["bitfl", "bb"]})(?&abstdeclorallqualifs))(?{pop @flags}))(??{'\Q$^N\E'})|(?{pop @flags})(*F))\s*+;\s*+)

(?<structbody>\s*+[{](?(<enum>)(?{call 'begin_enumerator_def'})
	(?<enumerator>(?&add_ident_to_enum_def)
	((=(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'end_ass_to_enum_def'}))
	|(?{call 'end_without_ass_to_enum_def'})))?+(,(?&enumerator))*+,?+\s*+
	|(?{call 'struc_or_union_body'})\s*+(?(?=((?{push @flags, ["nesteddecl"]})(?&strcelem))(?{pop @flags}))(??{'\Q$^N\E'})|(?{pop @flags})(*F))*+)\s*+
	[}]\s*+(?(<enum>)()|(?{call 'endbuildingstructorunion'}))\s*+)

(?<structorunion>
	(?=(?<begin>\s*+\b(?<structorunionlast>struct|union|(?<enum>enum))\b\s*+(?&align)?+
	(?<lasttag>(?&identifierminestruct))?+))\g{begin}(?(?=(?<body>(?&structbody)))\g{body}|(?(<lasttag>)|(*F)))
	(?{call 'add_tag'})
)

(?<identifierminestruct>(?&identifierraw_qualified))