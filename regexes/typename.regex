
(?<>)
(?<typenamequalifs>(?<qualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(\bvoid\b|\bint\b|\bchar\b|\bshort\b|\blong\b
						|\bsigned\b|\bunsigned\b|\bfloat\b|\bdouble\b(?#|\b__int(64|32|8|16)\b|\b_Bool\b))|
						(?<qualifiers>\bconst\b|\brestrict\b|\bvolatile\b)
						|(?<storageclass>\bextern\b|\bstatic\b|\bauto\b|\bregister\b))
						(?C&add_type_or_qualifier)\s*+)
						(?#|(\s*+(\b__inline\b|\b__forceinline\b|\b__unaligned\b)\s*+)))|(?&structorunion)
						|(?&&identifierminetypedeffacet<>))
(?<>)
(?<allqualifs>(?&qualifs)|(?&structorunion))

(?<>)
(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<align>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<>)
(?<qualifsnext>(?&qualifs)
	|(?(?{$facet})|(?=(?<structorunionlast>struct|union|(?<enum>enum))
	\s*+(?&align<>)?+(?<identlasttag>(?#!(?&keywordlistfacet))(?&identifierrawfacet))?+(?C&add_tag)))
	(?&structorunionfacet))

(?<typename>\s*+[(](?=(?&&typenamequalifsfacet<>)++(?C&identifier_decl)(?&abstdecloptoutter)?+(?C&enddeclaration))
						(?&&typenamequalifs<>)++
						(?&abstdecloptoutterfacet)?+[)](?C&endqualifs)\s*+)

(?<>)
(?<typedefdecl>(?&&identifierminetypedeffacet<>)(?=(?&allqualifsfacet)*+(?&abstdecloutterfacet)))

(?<>)
(?<allqualifsdecl>(?&allqualifs)|(?&&typedefdecl<>)|\s*+(?<typedefkey>\btypedef\b)\s*+)

(?# The committee has decided against (if actually even possible) having the same name as a typedef for a parameter)
(?<>)
(?<typedefparam>(?&&identifierminetypedeffacet<>))
(?<>)
(?<allqualifsparam>(?&allqualifs)|(?&&typedefparam<>))

(?<Tabstrrest, Tabstrrestalt, Tinside>)(?<abstdecl>(?(?{$facet})(?&abstrptr)(?&abstrptr)*+(?&Tabstrrest)
						|(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&qualifiers)(?#|\s*+\b__ptr(64|32)\b\s*+))*+)
						(?!(?&abstrptrrev)(?C&addptrtotype))
						(?<abstrrest>(?&Tinside)(?<abstrsubs>\s*+(\[(?C&beginconstantexpr)(?&primexpr)\]
						(?C&addsubtotype)(?C&endconstantexpr)
						|[(](?C&startfunctionparamdecl)(\s*+\bvoid\b\s*+|(((?&&typenameinsideparams)(?#C42))?+
						(,(?&&typenameinsideparams)(?#C42))*(?<rest>,\s*+\.\.\.\s*+)?+))[)](?C&endfunctionparamdecl))\s*+)*+(?C&addptrtotype))|
						(?&abstrptr))(?&abstrptr)*+(?&Tabstrrest))|(?&Tabstrrestalt))


(?&abstdecl<abstrdecloptrest, abstrdecloptrestalt, abstrmostoutteropt?+>=abstdecloptoutter)

(?<abstrdecloptrestalt>(?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++)

(?<abstrdecloptrest>(?&abstrmostoutteroptfacet)?+(?&abstrsubsfacet)*+)

(?&abstdecl<abstrdeclrest, abstrdeclrestalt, abstrmostoutter>=abstdecloutter)

(?<abstrdeclrestalt>(?&abstrmostoutter)(?&abstrsubs)*+)

(?<abstrdeclrest>(?&abstrmostoutterfacet)(?&abstrsubsfacet)*+)

(?&abstdecl<abstrdecloptrestparams, abstrdecloptrestaltparams, abstrmostoutterparams>=abstdecloutterparams)

(?<abstrdecloptrestaltparams>(?&abstrmostoutterparams)(?&abstrsubs)*+)

(?<abstrdecloptrestparams>(?&abstrmostoutterparamsfacet)(?&abstrsubsfacet)*+)

(?<Tabstrdeclinside>)(?<abstrcommonoutter>[(](?<cc>((?&callingconv))?+)(?&Tabstrdeclinside)(?C81)[)])

(?<abstrmostoutteropt>\s*+(?&callingconv)?+(?&abstrcommonoutter<abstdecloptoutter>)\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+((?&abstrcommonoutter<abstdecloutter>)|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?(?=(?&abstrsubsfacet))(?C&identifier_decl)(?&abstrsubs)|((?&abstrcommonoutter<abstdecloutterparams>)|(?&identifierminedecl)|(?C&identifier_decl)))\s*+)

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tabsqualifs, Tdecl>)
(?<abstdeclorallqualifsbasic>
(
	(*F)(?&&allqualifs<>)(?&&Tabsqualifs<>)
)|(?(?{$facet})(*F))
((?&&Tabsqualifsfacet<>)(?!(?&Tdecl)(?C&enddeclaration)))
				|(?&&Tabsqualifsfacet<>)(?&Tdeclfacet)(?C&endqualifs))

(?<Tabsqualifs, Tasbtdecloutter, Tabstinitorbitfl>)
(?<abstdeclorallqualifs>
		(
			(*F)(?&&decl<Tasbtdecloutter, Tabstinitorbitfl>)
			(?<declcomma>,(?&decl))
			(?&&allqualifs<>)
			(?&&Tabsqualifs<>)
		)|
		(?(?{$facet})(*F))
		((?&&Tabsqualifsfacet<>)(?!(?&decl)(?C&enddeclaration))
				|(?&Tabsqualifs)(?&declfacet)(?C&endqualifs)
				|(?<restoutter>(?=(?&&Tabsqualifsfacet<>)(?&declfacet)
				(?<rest>(?(<rest>)\g{rest}),(?&decl)(?C&enddeclaration)))
				((?(DEFINE)(?&qualifsnext<>=allqualifs)(?&&Tabsqualifs<>))
				(?&Tabsqualifs)(?&declfacet)\g{rest}(?C&endqualifs)
				|(?&restoutter))))
				|(?&&Tabsqualifsfacet<>)(?&declfacet)(?&declcommafacet)*+)


(?<Tasbtdecloutter, Tabstinitorbitfl>)
(?<decl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?+)

(?&abstdeclorallqualifs<allqualifsdecl*+, abstdecloutter, abstrinitialization>=typenameinsideopt)

(?&abstdeclorallqualifsbasic<allqualifsdecl*+, abstdecloutter>=typenameinsideoptbasic)

(?&abstdeclorallqualifs<allqualifsdecl++, abstdecloutter, abstrinitialization>=typenameinsidedecl)

(?&abstdeclorallqualifsbasic<allqualifsparam++, abstdecloutterparams>=typenameinsideparams)

(?&abstdeclorallqualifs<allqualifsdecl++, abstdecloutter, abstrbitfield>=typenamebitfl)

(?<identifierminedecl>\s*+(?#!(?&keywordlistfacet))(?<ident>(?&identifierrawfacet))
	(?(R&func)|(?(R&typenameinsideopt)(?C&identifier_decl_object)
	|(?(R&typenameinsideoptbasic)
	(?C&identifier_decl_object)(?C&extract_func)
	|(?(R&typenameinsidedecl)(?C&identifier_decl_object))))
	(?C&identifier_decl))\s*+)
(?<>)
(?<identifierminetypedeffacet#restrictperlonly>\s*+\b(?<typedefnmmatched>(??C&identifier_typedef))\b\s*+)

(?<keywordlist>(?&typesandqualifiersmask)
	|\b(typedef|struct|enum|sizeof|break|case|continue|default|do|else|for|goto|if|return|switch|while)\b)

(?<typenamerev>(?(?{$facet})(*F))((?&typenamefacet)(?!(?&castexpr)))|(?&typename)(?C&applycast)(?&castexprfacet))


(?<abstrbitfield>\s*+:\s*+(?C&beginconstantexpr)(?&assignorsomething)(?C&endconstantexpr))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)(?C95)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<calloutid>)
(?<identifiermine>\s*+(?#!(?&keywordlistfacet))(?<identlasttag>(?&identifierrawfacet))(?C&calloutid)\s*+)


(?<structorunion>\s*+(?<structorunionlast>struct|union|(?<enum>enum))(?&align<>)?+
	((?&identifierminestruct<>)?+\s*+[{](?(<enum>)(?C&begin_enumerator_def)
	(?<enumerator>(?&&identifiermine<add_ident_to_enum_def>)
	((=(?C&beginconstantexpr)(?&assignorsomething)(?C&end_ass_to_enum_def))
	|(?C&end_without_ass_to_enum_def)))?+(,(?&enumerator))*+,?+\s*+
	|(?C&struc_or_union_body)\s*+((?&typenamebitfl)\s*+;\s*+)*+)
	[}](?(<enum>)()|(?C&endbuildingstructorunion))(?C&add_tag)\s*+
|(?&identifierminestruct<>)(?C&add_tag))(?#|(?&enum<>)))

(?#
(?<>)
(?<enum>\s*+(?<structorunionlast>enum)(((?&&identifiermine<begin_enumerator_def>)
	|(?C94))\s*+[{](?<enumerator>(?&&identifiermine<add_ident_to_enum_def>)((=(?C&beginconstantexpr)(?&assignorsomething)(?C92))
	|(?C93)))?+(,(?&enumerator))*+,?+\s*+[}]\s*+
	|(?&&identifiermine<begin_enumerator_decl>)))
)
(?<>)
(?<identifierminestruct>\s*+(?#!(?&keywordlistfacet))(?<identlasttag>(?&identifierrawfacet))\s*+)
(?#C42)
(?<declninitopt>(?&typenameinsidedeclfacet)(?&abstrinitialization)?+)
(?<declaration>((?&declninitoptfacet)(?!)
			(,(?#C43)(?&abstdecloutter)(?#C42)(?&abstrinitialization)?+)*+\s*+;\s*+))

(,(?&abstdecloutter)(?&abstrinitialization)?+)*+