#include "main.regex", "inner.regex", "unary.regex", "binary.regex", "primexpr.regex"
#entry ^cprogram

(?<typenamequalifs>(?<qualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(\bvoid\b|\bint\b|\bchar\b|\bshort\b|\blong\b
						|\bsigned\b|\bunsigned\b|\bfloat\b|\bdouble\b)|
						(?<qualifiers>\bconst\b|\brestrict\b|\bvolatile\b)
						|(?<storageclass>\bextern\b|\bstatic\b|\bauto\b|\bregister\b))
						(?{call "add_type_or_qualifier"})\s*+))|(?&structorunion)
						|(?&identifierminetypedef))

(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<align>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<typename>\s*+[(](?=(?&typenamequalifsfacet)++(?{call "identifier_decl"})
						(?<abstrdeclopt>(?&abstdecl<abstdecloptoutter>)?+)(?{call "enddeclaration"}))
						(?&typenamequalifs)++
						\g{abstrdeclopt}[)](?{call "endqualifs"})\s*+)

(?<allqualifsparam>\s*+(?&qualifs)\s*+|(?&structorunion)
	|(?(?{exists $matches{tpdflocal}})(*F))((?&identifierminetypedef))(?{$matches{tpdflocal}=$^N}))

(?<allqualifsdecl>(?&allqualifsparam)|\s*+(\btypedef\b)(?{print (($matches{typedefkey}=$^N) . "\n")})\s*+)

(?<abstrmostoutteropt>\s*+(?&callingconv)?+[(](?&abstdecl<abstdecloptoutter>)[)]\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+([(](?&abstdecl<abstdecloutter>)[)]|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?(?=(?&abstrsubsfacet))(?{call "identifier_decl"})(?&abstrsubs)
			|([(](?&abstdecl<abstdecloutterparams>)[)]
			|(?&identifierminedecl)
			|(?{call "identifier_decl"})))\s*+)

(?<identifierminedecl>\s*+(?!(?&keywordlistfacet))(?<ident>(?&identifierrawfacet))
	(?{call "identifier_decl"})\s*+)

(?#<Tabstrrest, Tabstrrestalt, Tinside>)

(?<Tabstrrest>
	(?(?{$abstdecloptoutter})(?&abstrmostoutteroptfacet)?+(?&abstrsubsfacet)*+)
	(?(?{$abstdecloutter})(?&abstrmostoutterfacet)(?&abstrsubsfacet)*+)
	(?(?{$abstdecloutterparams})(?&abstrmostoutterparamsfacet)(?&abstrsubsfacet)*+)
	)

(?<Tabstrrestalt>
	(?(?{$abstdecloptoutter})((?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++))
	(?(?{$abstdecloutter})(?&abstrmostoutter)(?&abstrsubs)*+)
	(?(?{$abstdecloutterparams})(?&abstrmostoutterparams)(?&abstrsubs)*+)
	)

(?<Tinside>
	(?(?{$abstdecloptoutter})(?&abstrmostoutteropt)?+)
	(?(?{$abstdecloutter})(?&abstrmostoutter))
	(?(?{$abstdecloutterparams})(?&abstrmostoutterparams))
	)

(?<abstdecl>(?(?{isfacet})(?&abstrptr)(?&abstrptr)*+(?&Tabstrrest)
						|(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&qualifiers))*+)
						(?!(?&abstrptrrev)(?{call "addptrtotype"}))
						(?<abstrrest>(?&Tinside)(?<abstrsubs>\s*+(\[(?{call "beginconstantexpr"})(?&primexpr)\]
						(?{call "addsubtotype"})(?{call "endconstantexpr"})
						|[(](?{call "startfunctionparamdecl"})(\s*+\bvoid\b\s*+|(((?&decl<typenameinsideparams>))?+
						(,(?&decl<typenameinsideparams>))*(?<rest>,\s*+\.\.\.\s*+)?+))[)](?{call "endfunctionparamdecl"}))\s*+)*+
						(?{call "addptrtotype"}))|
						(?&abstrptr))(?&abstrptr)*+(?&Tabstrrest))|(?&Tabstrrestalt))

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tasbtdecloutter>
	(?(?{$typenameinsideparams})(?&abstdecl<abstdecloutterparams>)|(?&abstdecl<abstdecloutter>))
	)

(?<Tabstinitorbitfl>
	(?(?{$typenamebitfl})(?&abstrbitfield)|(?(?{$typenameinsideparams})(*F)|(?&abstrinitialization)))
	)

(?<Tdecl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?+)

(?<Tabsqualifs>
	(?{delete $matches{tpdflocal}})(?(?{$extrnl_def})(?&allqualifsdecl)*+|(?(?{$typenameinsideparams})(?&allqualifsparam)++|(?&allqualifsdecl)++))
	)

(?#<Tabsqualifs, Tdecl, Tidentifierminetypedef, Tidentifierminetypedeffwd, Tqualifwrapper>)
(?<abstdeclorallqualifsbasic>
	(?(?{isfacet})(?&Tabsqualifsfacet)(?&Tdeclfacet)|
	(?=(?&Tabsqualifsfacet)(?<restdeclbasic>(?&Tdecl))(?{call "enddeclaration"}))
				((?&Tabsqualifs))(?{$matches{lastbasicqual}=$^N})\g{restdeclbasic}(?{call "endqualifs"})
))

(?<declcomma>,(?&Tdecl))

(?#<Tabsqualifs, Tasbtdecloutter, Tabstinitorbitfl, Tidentifierminetypedef, Tidentifierminetypedeffwd, Tqualifwrapper>)
(?<abstdeclorallqualifs>
		(?(?{isfacet})(?&Tabsqualifsfacet)(?&Tdeclfacet)(?&declcommafacet)*+|
		(?<restoutter>(?=(??{"\Q$matches{lastbasicqual}\E"})
				(?<restdecl>(?(<restdecl>)\g{restdecl},)(?&Tdecl)(?{call "enddeclaration"})))
				((?&Tabsqualifs)\g{restdecl}(?{call "endqualifs"})
				|(?&restoutter)))
				))

(?<decl>(?(?=((?&structorunion)(?<fill>\s*+;\s*+)?+)))
	(?(<fill>)\g{-1}|(?=(?&abstdeclorallqualifsbasic)(?<compound>(?&compoundstatement))?+)
	(?(<compound>)(?&abstdeclorallqualifsbasicfacet)\g{compound}
	|(?&abstdeclorallqualifs)\s*+;(?{call "endfulldecl"; checkpoint})\s*+)))

(?<cprogram>(?&decl<extrnl_def>)*+)

(?<identifierminetypedef>\s*+\b((??{identifier_typedef}))(?{$matches{typedefnmmatched}=$^N})\b\s*+)

(?<keywordlist>(?&typesandqualifiersmask)
	|\b(typedef|struct|enum|sizeof|break|case|continue|default|do|else|for|goto|if|return|switch|while)\b)

(?<typenamerev>(?(?{isfacet})(*F))((?&typenamefacet)(?!(?&castexpr)))|(?&typename)(?{call "applycast"})(?&castexprfacet))


(?<abstrbitfield>\s*+:\s*+(?{call "beginconstantexpr"})(?&assignorsomething)(?{call "endconstantexpr"}))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<add_ident_to_enum_def>\s*+(?!(?&keywordlistfacet))(?<identlasttag>(?&identifierrawfacet))(?{call "add_ident_to_enum_def"})\s*+)

(?<structbody>[{](?(<enum>)(?{call "begin_enumerator_def"})
	(?<enumerator>(?&add_ident_to_enum_def)
	((=(?{call "beginconstantexpr"})(?&assignorsomething)(?{call "end_ass_to_enum_def"}))
	|(?{call "end_without_ass_to_enum_def"})))?+(,(?&enumerator))*+,?+\s*+
	|(?{call "struc_or_union_body"})\s*+((?&decl<typenamebitfl>)\s*+;\s*+)*+)
	[}](?(<enum>)()|(?{call "endbuildingstructorunion"}))(?{call "add_tag"})\s*+)

(?<structorunion>\s*+(?<structorunionlast>struct|union|(?<enum>enum))(?&align)?+
	((?&identifierminestruct)?+\s*+((??{"\Q$matches{structbody}\E"})(?{call "add_tag"})
	|((?&structbody))(?{$matches{structbody}=$^N}))
	|(?&identifierminestruct)(?{call "add_tag"})))

(?<identifierminestruct>\s*+(?!(?&keywordlistfacet))((?&identifierrawfacet))\s*+)