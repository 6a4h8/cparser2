

(?<qualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(?&typeorqualif))\s*+))

(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<alignnum>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<typename>\s*+[(]

	(?{push @matches, {}})

	(?(?=
		(?{push @savedcallouts, []})
		(?{++$recording})

		(((?&qualifs)|\s*+((?(?{exists $matches[-1]{strc}})(*F))(?(?{exists $matches[-1]{typedefnmmatched}})(*F))
		(((?&structorunion))(?{$matches[-1]{strc}=$^N})
		|((?&identifier_typedef))(?{$matches[-1]{typedefnmmatched}=$^N})))
		|(?(?{exists $matches[-1]{typedefkey}})(*F))((\btypedef\b))(?{$matches[-1]{typedefkey}=$^N})\s*+)++))

		|(?{pop @savedcallouts})(?{--$recording})(?{pop @matches})(*F))
		
	(?{--$recording})(?{push @flags, {"optoutter"}})
	
		(??{qr{\Q$^N\E}})(?{call 'identifier_decl'})(?&abstdecl)?+
		(?{call 'enddeclaration'})

		(?{pop @flags})
		(?{replayrecord})
		(?{pop @savedcallouts})
		(?{pop @matches})

		[)](?{call 'endqualifs'})\s*+
		
)

(?<abstrmostoutteropt>\s*+(?&callingconv)?+[(](?(?=(?{push @flags, {"optoutter"}})((?&abstdecl)))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F))[)]\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+([(](?(?=(?{push @flags, {"outter"}})((?&abstdecl)))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F))[)]|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?(?=(?{push @flags, {"subsparams"}})
			(?<subs>(?&abstrsubs)))(?{pop @flags})\g{subs}
			|(?{pop @flags})((?(?=([(](?{push @flags, {"outterparams"}})(?&abstdecl)[)](?{pop @flags})))
			(??{qr{\Q$^N\E}})|(?{pop @flags})(*F))
			|(?&identifierminedecl)
			|(?{call 'identifier_decl'})))\s*+)

(?<identifierminedecl>\s*+(?<ident>(?&identifierraw_qualified))
	(?{call 'identifier_decl'})\s*+)

(?<Tabstrrestalt>
	(?{print Dumper @flags})
	(?(?{exists $flags[-1]{outterparams}})(?&abstrmostoutterparams)(?&abstrsubs)*+
	|(?(?{exists $flags[-1]{outter}})(?&abstrmostoutter)(?&abstrsubs)*+
	|(?(?{exists $flags[-1]{optoutter}})((?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++))))
	)

(?<Tinside>
	(?(?{exists $flags[-1]{outterparams}})(?&abstrmostoutterparams)
	|(?(?{exists $flags[-1]{outter}})(?&abstrmostoutter)
	|(?(?{exists $flags[-1]{optoutter}}))(?&abstrmostoutteropt)?+))
	)

(?<param>(?(?=((?{push @flags, ["insideparams", "bb"]})(?&abstdeclorallqualifs))(?{pop @flags}))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F)))

(?<abstrsubs>\s*+(\[
						(?(?{exists $flags[-1]{subsparams}})(?{call 'identifier_decl'}))
						(?{call 'beginconstantexpr'})(?&primexpr)\]
						(?{call 'addsubtotype'})(?{call 'endconstantexpr'})
						|[(](?(?{exists $flags[-1]{subsparams}})(?{call 'identifier_decl'}))
						((?(?=(?{push @flags, ["firstparam", "nesteddecl"]})((?&param))(?{pop @flags}))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F))
						(,(?(?=(?{push @flags, {"nesteddecl"}})((?&param))(?{pop @flags}))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F)))*|(?{call 'startfunctionparamdecl'}))?+
						(?<rest>,?+\s*+\.\.\.\s*+)?+\s*+[)](?{call 'endfunctionparamdecl'}))\s*+)

(?<abstdecl>
		(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&typeorqualif))*+)
						(?(?!(?<foundabstr>(?&abstrptrrev))(?{call 'addptrtotype'}))
						(?<abstrrest>(?&Tinside)(?&abstrsubs)*+
						(?{call 'addptrtotype'}))|
						\g{foundabstr}))|(?&Tabstrrestalt)
)

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tasbtdecloutter>
	(?(?{exists $flags[-1]{insideparams}})(?(?=(?{push @flags, {"outterparams"}})((?&abstdecl)))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F))
	|(?(?=(?{push @flags, {"outter"}})((?&abstdecl)))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F)))
)

(?<Tabstinitorbitfl>
	(?(?{exists $flags[-1]{bitfl}})(?&abstrbitfield)|(?&abstrinitialization))
	)

(?<Tdecl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?+)


(?<declcomma>,(?&Tdecl))

(?<abstdeclorallqualifs>

	(?{push @matches, {}})

	(?(?=(?{push @savedcallouts, []})
		(?{++$recording})

		((((?&qualifs))(?{$matches[-1]{typefound}=$^N})|\s*+((?(?{exists $matches[-1]{strc}})(*F))
		(?(?{exists $matches[-1]{typedefnmmatched}})(*F))
		(((?&structorunion))(?{$matches[-1]{strc}=$^N})
		|(?(?{exists $matches[-1]{typefound}})(*F))((?&identifier_typedef))(?{$matches[-1]{typedefnmmatched}=$^N}))
		|(?(?{exists $matches[-1]{typedefkey}})(*F))((\btypedef\b))(?{$matches[-1]{typedefkey}=$^N}))\s*+)++))

		|(?{pop @savedcallouts})(?{--$recording})(?{pop @matches})(*F))
	(?{--$recording})
	(??{qr{\Q$^N\E}})(?(?{exists $flags[-1]{firstparam}})(?{call 'startfunctionparamdecl'}))
	(?(?=(?<declinner>(?&Tdecl)(?{call 'enddeclaration'})(?{replayrecord})(?{call 'endqualifs'})))\g{declinner}
	(?(?{exists $flags[-1]{insideparams}})|(,(?&declinner))*+)|(?(?{exists $matches[-1]{strc}})|(*F)))

	(?{pop @savedcallouts})
	(?{pop @matches})
)

(?<decl>(?&abstdeclorallqualifs)(?(?!\s*+;)(?&compoundstatement)|\s*+;(?{call 'endfulldecl'})\s*+))

(?<cprogram>(?(?=(?{push @flags, {"extrnl"}})((?&decl)))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F)))

(?<typenamerev>(?(?=(?{push @savedcallouts, []})
		(?{++$recording})(?<typenamerev1>(?&typename)))
		(?{--$recording})(?(?!((?&castexpr)))|\g{typenamerev1}(??{qr{\Q$^N\E}})
		(?{replayrecord})(?{pop @savedcallouts})
		(?{call 'applycast'}))
		
		|(?{pop @savedcallouts})(?{--$recording})(*F)))


(?<abstrbitfield>\s*+:\s*+(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'endconstantexpr'}))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<add_ident_to_enum_def>\s*+(?<identlasttag>(?&identifierraw_qualified))(?{call 'add_ident_to_enum_def'})\s*+)


(?<strcelem>(?(?=((?{push @flags, ["bitfl", "bb"]})(?&abstdeclorallqualifs))(?{pop @flags}))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F))\s*+;\s*+)

(?<structbody>\s*+[{](?(<enum>)(?{call 'begin_enumerator_def'})
	(?<enumerator>(?&add_ident_to_enum_def)
	((=(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'end_ass_to_enum_def'}))
	|(?{call 'end_without_ass_to_enum_def'})))?+(,(?&enumerator))*+,?+\s*+
	|(?{call 'struc_or_union_body'})\s*+(?(?=((?{push @flags, {"nesteddecl"}})(?&strcelem))(?{pop @flags}))(??{qr{\Q$^N\E}})|(?{pop @flags})(*F))*+)\s*+
	[}]\s*+(?(<enum>)()|(?{call 'endbuildingstructorunion'}))\s*+)

(?<structorunion>
	(?=(?<begin>\s*+\b(?<structorunionlast>struct|union|(?<enum>enum))\b\s*+(?&align)?+
	(?<lasttag>(?&identifierminestruct))?+))\g{begin}(?(?=(?<body>(?&structbody)))\g{body}|(?(<lasttag>)|(*F)))
	(?{call 'add_tag'})
)

(?<identifierminestruct>(?&identifierraw_qualified))