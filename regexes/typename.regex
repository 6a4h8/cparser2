#include "main.regex", "inner.regex", "unary.regex", "binary.regex", "primexpr.regex"
#entry ^cprogram

(?<>)
(?<typenamequalifs>(?<qualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(\bvoid\b|\bint\b|\bchar\b|\bshort\b|\blong\b
						|\bsigned\b|\bunsigned\b|\bfloat\b|\bdouble\b(?#|\b__int(64|32|8|16)\b|\b_Bool\b))|
						(?<qualifiers>\bconst\b|\brestrict\b|\bvolatile\b)
						|(?<storageclass>\bextern\b|\bstatic\b|\bauto\b|\bregister\b))
						(?C&add_type_or_qualifier)\s*+)
						(?#|(\s*+(\b__inline\b|\b__forceinline\b|\b__unaligned\b)\s*+)))|(?&structorunion<>)
						|(?&&identifierminetypedeffacet<>))

(?<>)
(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<align>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<typename>\s*+[(](?=(?&&typenamequalifsfacet<>)++(?C&identifier_decl)(?&abstdecloptoutter)?+(?C&enddeclaration))
						(?&&typenamequalifs<>)++
						(?&abstdecloptoutterfacet)?+[)](?C&endqualifs)\s*+)

(?<>)
(?<allqualifs>(?&qualifs)|(?&structorunion<>))

(?<>)
(?<typedefdecl>\s*+(?=(?!(?&keywordlistfacet))(?&identifierraw)(?&allqualifsfacet<>)*+(?&abstdecloutterfacet))(?&&identifierminetypedeffacet<>))

(?<Tqualifs>)
(?<allqualifsdecl>(?&Tqualifs<>)|(?&&typedefdecl<>)|\s*+(?<typedefkey>\btypedef\b)\s*+)

(?# The committee has decided against (if actually even possible) having the same name as a typedef for a parameter)
(?<>)
(?<typedefparam>(?&&identifierminetypedeffacet<>))
(?<Tqualifs>)
(?<allqualifsparam>(?&Tqualifs<>)|(?&&typedefparam<>))

(?<Tabstrrest, Tabstrrestalt, Tinside>)(?<abstdecl>(?(?{$facet})(?&abstrptr)(?&abstrptr)*+(?&Tabstrrest)
						|(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&qualifiers)(?#|\s*+\b__ptr(64|32)\b\s*+))*+)
						(?!(?&abstrptrrev)(?C&addptrtotype))
						(?<abstrrest>(?&Tinside)(?<abstrsubs>\s*+(\[(?C&beginconstantexpr)(?&primexpr)\]
						(?C&addsubtotype)(?C&endconstantexpr)
						|[(](?C&startfunctionparamdecl)(\s*+\bvoid\b\s*+|(((?&&typenameinsideparams)(?#C42))?+
						(,(?&&typenameinsideparams)(?#C42))*(?<rest>,\s*+\.\.\.\s*+)?+))[)](?C&endfunctionparamdecl))\s*+)*+(?C&addptrtotype))|
						(?&abstrptr))(?&abstrptr)*+(?&Tabstrrest))|(?&Tabstrrestalt))


(?&abstdecl<abstrdecloptrest, abstrdecloptrestalt, abstrmostoutteropt?+>=abstdecloptoutter)

(?<abstrdecloptrestalt>(?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++)

(?<abstrdecloptrest>(?&abstrmostoutteroptfacet)?+(?&abstrsubsfacet)*+)

(?&abstdecl<abstrdeclrest, abstrdeclrestalt, abstrmostoutter>=abstdecloutter)

(?<abstrdeclrestalt>(?&abstrmostoutter)(?&abstrsubs)*+)

(?<abstrdeclrest>(?&abstrmostoutterfacet)(?&abstrsubsfacet)*+)

(?&abstdecl<abstrdecloptrestparams, abstrdecloptrestaltparams, abstrmostoutterparams>=abstdecloutterparams)

(?<abstrdecloptrestaltparams>(?&abstrmostoutterparams)(?&abstrsubs)*+)

(?<abstrdecloptrestparams>(?&abstrmostoutterparamsfacet)(?&abstrsubsfacet)*+)

(?<Tabstrdeclinside>)(?<abstrcommonoutter>[(](?<cc>((?&callingconv))?+)(?&Tabstrdeclinside)(?C81)[)])

(?<abstrmostoutteropt>\s*+(?&callingconv)?+(?&abstrcommonoutter<abstdecloptoutter>)\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+((?&abstrcommonoutter<abstdecloutter>)|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?(?=(?&abstrsubsfacet))(?C&identifier_decl)(?&abstrsubs)|((?&abstrcommonoutter<abstdecloutterparams>)|(?&identifierminedecl)|(?C&identifier_decl)))\s*+)

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tabsqualifs, Tdecl>)
(?<abstdeclorallqualifsbasic>
(?(?{$facet})(*F))
(?=(?&&Tabsqualifsfacet<allqualifs>)(?<decl>(?&Tdecl))(?C&enddeclaration))
				(?&Tabsqualifs)\g{decl}(?C&endqualifs)
				|(?&Tabsqualifs)(?&decl))

(?<Tabsqualifs, Tasbtdecloutter, Tabstinitorbitfl>)
(?<abstdeclorallqualifs>
		(
			(*F)(?&&decl<Tasbtdecloutter, Tabstinitorbitfl>)
			(?<declcomma>,(?&decl))
			(?&&Tabsqualifs<allqualifs>)
		)|
		(?(?{$facet})(*F))
		(?<restoutter>(?=(?&&Tabsqualifsfacet<>)
				(?<rest>(?(<rest>)\g{rest},)(?&decl)(?C&enddeclaration)))
				((?&Tabsqualifs)\g{rest}(?C&endqualifs)(?!,)
				|(?&restoutter)))
				|(?&&Tabsqualifsfacet<allqualifs>)(?&declfacet)(?&declcommafacet)*+)
(?<Ttypename>)
(?<declstm>(?<decls>(?&Ttypename)\s*+;(?C&endfulldecl)\s*+)(?(R&compoundstatement)|(?C&extract_decl)))

(?<Ttypename>)
(?<Tdeclsbb>(?=(?<strucdecl>(?&structorunion<>)\s*+;\s*+)|)
	(?(<strucdecl>)\g{strucdecl}|(?&&declstm<Ttypename>)))

(?&Tdeclsbb<typenameinsidedecl>=declsbb)

(?<extrnl_def>(?=(?<func>(?&typenameinsideoptbasic)(?<compound>(?&compoundstatement)))|)
	(?(<func>)(?&typenameinsideoptbasicfacet)\g{compound}
	|(?&Tdeclsbb<typenameinsideopt>)))

(?<cprogram>(?&&extrnl_def)*+)


(?<Tasbtdecloutter, Tabstinitorbitfl>)
(?<decl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?+)

(?&abstdeclorallqualifs<allqualifsdecl*+, abstdecloutter, abstrinitialization>=typenameinsideopt)

(?&abstdeclorallqualifsbasic<allqualifsdecl*+, abstdecloutter>=typenameinsideoptbasic)

(?&abstdeclorallqualifs<allqualifsdecl++, abstdecloutter, abstrinitialization>=typenameinsidedecl)

(?&abstdeclorallqualifsbasic<allqualifsparam++, abstdecloutterparams>=typenameinsideparams)

(?&abstdeclorallqualifs<allqualifsdecl++, abstdecloutter, abstrbitfield>=typenamebitfl)

(?<identifierminedecl>\s*+(?!(?&keywordlistfacet))(?<ident>(?&identifierrawfacet))
	(?(R&typenameinsideopt)(?C&identifier_decl_object)
	|(?(R&typenameinsidedecl)(?C&identifier_decl_object)
	|(?(R&typenameinsideoptbasic)(?(<func>)(?C&extract_func))(?C&identifier_decl_object))))
	(?C&identifier_decl))\s*+)
(?<>)
(?<identifierminetypedeffacet#restrictperlonly>\s*+\b(?<typedefnmmatched>(??C&identifier_typedef))\b\s*+)

(?<keywordlist>(?&typesandqualifiersmask)
	|\b(typedef|struct|enum|sizeof|break|case|continue|default|do|else|for|goto|if|return|switch|while)\b)

(?<typenamerev>(?(?{$facet})(*F))((?&typenamefacet)(?!(?&castexpr)))|(?&typename)(?C&applycast)(?&castexprfacet))


(?<abstrbitfield>\s*+:\s*+(?C&beginconstantexpr)(?&assignorsomething)(?C&endconstantexpr))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)(?C95)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<calloutid>)
(?<identifiermine>\s*+(?!(?&keywordlistfacet))(?<identlasttag>(?&identifierrawfacet))(?C&calloutid)\s*+)

(?<>)
(?<structbody>[{](?(<enum>)(?C&begin_enumerator_def)
	(?<enumerator>(?&&identifiermine<add_ident_to_enum_def>)
	((=(?C&beginconstantexpr)(?&assignorsomething)(?C&end_ass_to_enum_def))
	|(?C&end_without_ass_to_enum_def)))?+(,(?&enumerator))*+,?+\s*+
	|(?C&struc_or_union_body)\s*+((?&typenamebitfl)\s*+;\s*+)*+)
	[}](?(<enum>)()|(?C&endbuildingstructorunion))(?C&add_tag)\s*+)

(?<>)
(?<structorunion>\s*+(?<structorunionlast>struct|union|(?<enum>enum))(?&align<>)?+
	((?&identifierminestruct<>)?+\s*+(?(<structbody>)(?&&structbody<>)|(?C&add_tag)\g{structbody})
	|(?&identifierminestruct<>)(?C&add_tag))(?#|(?&enum<>)))

(?#
(?<>)
(?<enum>\s*+(?<structorunionlast>enum)(((?&&identifiermine<begin_enumerator_def>)
	|(?C94))\s*+[{](?<enumerator>(?&&identifiermine<add_ident_to_enum_def>)((=(?C&beginconstantexpr)(?&assignorsomething)(?C92))
	|(?C93)))?+(,(?&enumerator))*+,?+\s*+[}]\s*+
	|(?&&identifiermine<begin_enumerator_decl>)))
)
(?<>)
(?<identifierminestruct>\s*+(?!(?&keywordlistfacet))(?<identlasttag>(?&identifierrawfacet))\s*+)
(?#C42)
(?<declninitopt>(?&typenameinsidedeclfacet)(?&abstrinitialization)?+)
(?<declaration>((?&declninitoptfacet)(?!)
			(,(?#C43)(?&abstdecloutter)(?#C42)(?&abstrinitialization)?+)*+\s*+;\s*+))

(,(?&abstdecloutter)(?&abstrinitialization)?+)*+