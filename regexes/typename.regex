

(?<qualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(?&typeorqualif))\s*+))

(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<alignnum>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<typename>\s*+[(]

	(?{push2 \@matches, {}})

	(?(?=
		(?{push2 \@savedcallouts, []})
		(?{++$recording; print "recording typename\n"})

		(((?&qualifs)|\s*+((?(?{eval {exists $matches[-1]{strc}} or 0})(*F))(?(?{eval {exists $matches[-1]{typedefnmmatched}} or 0})(*F))
		(((?&structorunion))(?{$matches[-1]{strc}=$^N})
		|((?&identifier_typedef))(?{$matches[-1]{typedefnmmatched}=$^N})))
		|(?(?{eval {exists $matches[-1]{typedefkey}} or 0})(*F))((\btypedef\b))(?{$matches[-1]{typedefkey}=$^N})\s*+)++))

		|(?{pop2 \@savedcallouts})(?{--$recording; print "minus minus typename $recording\n"})(?{pop2 \@matches})(*F))
		
	(?{--$recording})(?{push2 \@flags, {"optoutter"}})
	
		(??{qr{\Q$^N\E}})(?{call 'identifier_decl'})(?&abstdecl)?+
		(?{call 'enddeclaration'})

		(?{pop2 \@flags, {"optoutter"}})
		(?{replayrecord})
		(?{pop2 \@savedcallouts})
		(?{pop2 \@matches})

		[)](?{call 'endqualifs'})\s*+
		
)

(?<abstrmostoutteropt>\s*+(?&callingconv)?+[(](?(?=(?{push2 \@flags, {"optoutter"}})((?&abstdecl))(?{pop2 \@flags, {"optoutter"}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"optoutter"}})(*F))[)]\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+([(](?(?=(?{push2 \@flags, {"outter"}})((?&abstdecl))(?{pop2 \@flags, {"outter"}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"outter"}})(*F))[)]|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?(?=(?{push2 \@flags, {"subsparams"}})
			(?<subs>(?&abstrsubs)))(?{pop2 \@flags, {"subsparams"}})\g{subs}
			|(?{pop2 \@flags, {"subsparams"}})(?(?=(?{push2 \@flags, {"outterparams"}})([(](?&abstdecl)[)](?{pop2 \@flags, {"outterparams"}})))
			(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"outterparams"}})(?(?=((?&identifierminedecl)))(??{qr{\Q$^N\E}})|(?{call 'identifier_decl'})))
)\s*+)

(?<identifierminedecl>\s*+(?<ident>(?&identifierraw_qualified))
	(?{call 'identifier_decl'})\s*+)

(?<Tabstrrestalt>
	(?(?{eval {exists $flags[-1]{outterparams}} or 0})(?&abstrmostoutterparams)(?&abstrsubs)*+
	|(?(?{eval {exists $flags[-1]{outter}} or 0})(?&abstrmostoutter)(?&abstrsubs)*+
	|(?(?{eval {exists $flags[-1]{optoutter}} or 0})((?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++))))
	)

(?<Tinside>
	(?(?{eval {exists $flags[-1]{outterparams}} or 0})(?&abstrmostoutterparams)
	|(?(?{eval {exists $flags[-1]{outter}} or 0})(?&abstrmostoutter)
	|(?(?{eval {exists $flags[-1]{optoutter}} or 0}))(?&abstrmostoutteropt)?+))
	)

(?<param>(?(?=((?{push2 \@flags, {"insideparams"=>undef, "bb"=>undef}})(?&abstdeclorallqualifs))(?{pop2 \@flags, {"insideparams"=>undef, "bb"=>undef}}))
	(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"insideparams"=>undef, "bb"=>undef}})(*F)))

(?<abstrsubs>\s*+(\[
						(?(?{eval {exists $flags[-1]{subsparams}} or 0})(?{call 'identifier_decl'}))
						(?{call 'beginconstantexpr'})(?&primexpr)\]
						(?{call 'addsubtotype'})(?{call 'endconstantexpr'})
						|[(](?(?{eval {exists $flags[-1]{subsparams}} or 0})(?{call 'identifier_decl'}))
						(?=(((?(?=(?{push2 \@flags, {"firstparam"=>undef, "nesteddecl"=>undef}})((?&param))
						(?{pop2 \@flags, {"firstparam"=>undef, "nesteddecl"=>undef}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"firstparam"=>undef, "nesteddecl"=>undef}})(*F))
						(,(?(?=(?{push2 \@flags, {"nesteddecl"}})((?&param))(?{pop2 \@flags, {"nesteddecl"}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"nesteddecl"}})(*F)))*))
						(??{qr{\Q$^N\E}})|(?{call 'startfunctionparamdecl'}))
						(?<rest>,?+\s*+\.\.\.\s*+)?+\s*+[)](?{call 'endfunctionparamdecl'}))\s*+)

(?<abstdecl>
		(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&typeorqualif))*+)
						(?(?!(?<foundabstr>(?&abstrptrrev))(?{call 'addptrtotype'}))
						(?<abstrrest>(?&Tinside)(?&abstrsubs)*+
						(?{call 'addptrtotype'}))|
						\g{foundabstr}))|(?&Tabstrrestalt)
)

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tasbtdecloutter>
	(?(?{eval {exists $flags[-1]{insideparams}} or 0})(?(?=(?{push2 \@flags, {"outterparams"}})((?&abstdecl))(?{pop2 \@flags, {"outterparams"}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"outterparams"}})(*F))
	|(?(?=(?{push2 \@flags, {"outter"}})((?&abstdecl))(?{pop2 \@flags, {"outter"}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"outter"}})(*F)))
)

(?<Tabstinitorbitfl>
	(?(?{eval {exists $flags[-1]{bitfl}} or 0})(?&abstrbitfield)|(?&abstrinitialization))
	)

(?<Tdecl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?+)


(?<declcomma>,(?&Tdecl))

(?<abstdeclorallqualifs>
	
	(?{push2 \@matches, {}})

	(?(?=(?{push2 \@savedcallouts, []})
		(?{++$recording; print "recording abstdeclorallqualifs\n"})

		((((?&qualifs))(?{$matches[-1]{typefound}=$^N})|\s*+((?(?{eval {exists $matches[-1]{strc}} or 0})(*F))
		(?(?{eval {exists $matches[-1]{typedefnmmatched}} or 0})(*F))
		(((?&structorunion))(?{$matches[-1]{strc}=$^N})
		|(?(?{eval {exists $matches[-1]{typefound}} or 0})(*F))((?&identifier_typedef))(?{$matches[-1]{typedefnmmatched}=$^N}))
		|(?(?{eval {exists $matches[-1]{typedefkey}} or 0})(*F))((\btypedef\b))(?{$matches[-1]{typedefkey}=$^N}))\s*+)++))

		|(?{pop2 \@savedcallouts})(?{--$recording})(?{pop2 \@matches})(*F))
	(?{--$recording})
	(??{qr{\Q$^N\E}})(?(?{eval {exists $flags[-1]{firstparam}} or 0})(?{call 'startfunctionparamdecl'}))
	(?(?=(?<declinner>(?&Tdecl)(?{call 'enddeclaration'})(?{replayrecord})(?{call 'endqualifs'})))\g{declinner}
	(?(?{eval {print "dumpingflags\n"; print Dumper \@flags; exists $flags[-1]{insideparams}} or 0})|(,(?&declinner))*+)|(?(?{eval {exists $matches[-1]{strc}} or 0})|(*F)))

	(?{pop2 \@savedcallouts})
	(?{pop2 \@matches})
)

(?<decl>(?&abstdeclorallqualifs)(?(?!\s*+;)(?&compoundstatement)|\s*+;(?{call 'endfulldecl'})\s*+))

(?<cprogram>(?(?=(?{push2 \@flags, {"extrnl"}})((?&decl)))(?{pop2 \@flags, {"extrnl"}})(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"extrnl"}})(*F)))

(?<typenamerev>(?(?=(?{push2 \@savedcallouts, []})
		(?{++$recording; print "recording typenamerev\n"})(?<typenamerev1>(?&typename)))
		(?{--$recording})(?(?!((?&castexpr)))|\g{typenamerev1}(??{qr{\Q$^N\E}})
		(?{replayrecord})(?{pop2 \@savedcallouts})
		(?{call 'applycast'}))
		
		|(?{pop2 \@savedcallouts})(?{--$recording})(*F)))


(?<abstrbitfield>\s*+:\s*+(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'endconstantexpr'}))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<add_ident_to_enum_def>\s*+(?<identlasttag>(?&identifierraw_qualified))(?{call 'add_ident_to_enum_def'})\s*+)


(?<strcelem>(?(?=((?{push2 \@flags, {"bitfl", "bb"}})(?&abstdeclorallqualifs))(?{pop2 \@flags, {"bitfl", "bb"}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"bitfl", "bb"}})(*F))\s*+;\s*+)

(?<structbody>\s*+[{](?(<enum>)(?{call 'begin_enumerator_def'})
	(?<enumerator>(?&add_ident_to_enum_def)
	((=(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'end_ass_to_enum_def'}))
	|(?{call 'end_without_ass_to_enum_def'})))?+(,(?&enumerator))*+,?+\s*+
	|(?{call 'struc_or_union_body'})\s*+(?(?=((?{push2 \@flags, {"nesteddecl"}})(?&strcelem))(?{pop2 \@flags, {"nesteddecl"}}))(??{qr{\Q$^N\E}})|(?{pop2 \@flags, {"nesteddecl"}})(*F))*+)\s*+
	[}]\s*+(?(<enum>)()|(?{call 'endbuildingstructorunion'}))\s*+)

(?<structorunion>
	(?=(?<begin>\s*+\b(?<structorunionlast>struct|union|(?<enum>enum))\b\s*+(?&align)?+
	(?<lasttag>(?&identifierminestruct))?+))\g{begin}(?(?=(?<body>(?&structbody)))\g{body}|(?(<lasttag>)|(*F)))
	(?{call 'add_tag'})
)

(?<identifierminestruct>(?&identifierraw_qualified))