(?<typenamesubqualifsndecl>((?&allqualifsfacet)|(?&&identifierminetypedef))++(?C&identifier_decl)(?&abstdecloptoutter)?+(?C&enddeclaration))

(?<typename>\s*+[(](?=(?&typenamesubqualifsndecl))
						(?<typenamequalifs>(?<allqualifs>(?<typesandqualifiers>\s*+
						(?<typesandqualifiersmask>(\bvoid\b|\bint\b|\bchar\b|\bshort\b|\blong\b
						|\bsigned\b|\bunsigned\b|\bfloat\b|\bdouble\b|\b__int64\b|\b_Bool\b)|
						(?<qualifiers>\bconst\b|\brestrict\b|\bvolatile\b)
						|(?<storageclass>\bextern\b|\bstatic\b|\bauto\b|\bregister\b))
						(?C&add_type_or_qualifier)\s*+)
						|((?<typedefkeyfacet>(*F))|(?&structorunion))|(\s*+(\b__inline\b|\b__forceinline\b)\s*+)
						|(?&callingconv))
						|(?&&identifierminetypedef))++
						(?&abstdecloptoutterfacet)?+[)](?C&endqualifs)\s*+)


(?<typedefdecl>(?&&identifierminetypedef)(?=(?&allqualifsfacet)*+(?&abstdecloutterfacet)))


(?<allqualifsdecl>(?&allqualifs)|(?&&typedefdecl)(?C&add_typedef_to_decl)|\s*+(?<typedefkeyfacet>\btypedef\b)\s*+)

(?# The committee has decided against (if actually even possible) having the same name as a typedef for a parameter)

(?<typedefparam>(?&&identifierminetypedef))


(?<allqualifsparam>(?&allqualifs)|(?&&typedefparam)(?C&add_typedef_to_decl))

(?<Tabstrrest, Tabstrrestalt, Tinside>)(?<abstdecl>(?<abstrptrrev#restrictoutsidefacet>(?<abstrptr>\s*+[*]\s*+
						(?<qualifptr>(?&qualifiers)|\b__ptr64\b\s*+)*+)
						(?!(?&abstrptrrev)(?C&addptrtotype))
						(?<abstrrest>(?&Tinside)(?<abstrsubs>\s*+(\[(?C&beginconstantexpr)(?&primexpr)\]
						(?C&addsubtotype)(?C&endconstantexpr)
						|[(](?C&startfunctionparamdecl)(\s*+\bvoid\b\s*+|(((?&typenameinsideparams)(?#C42))?+
						(,(?&typenameinsideparams)(?#C42))*(?<rest>,\s*+\.\.\.\s*+)?+))[)](?C&endfunctionparamdecl))\s*+)*+(?C&addptrtotype))|
						(?&abstrptr))(?&abstrptr)*+(?&Tabstrrest)|(?&Tabstrrestalt))


(?&abstdecl<abstrdecloptrest, abstrdecloptrestalt, abstrmostoutteropt?+>=abstdecloptoutter)

(?<abstrdecloptrestalt>(?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++)

(?<abstrdecloptrest>(?&abstrmostoutteroptfacet)?+(?&abstrsubsfacet)*+)

(?&abstdecl<abstrdeclrest, abstrdeclrestalt, abstrmostoutter>=abstdecloutter)

(?<abstrdeclrestalt>(?&abstrmostoutter)(?&abstrsubs)*+)

(?<abstrdeclrest>(?&abstrmostoutterfacet)(?&abstrsubsfacet)*+)

(?&abstdecl<abstrdecloptrestparams, abstrdecloptrestaltparams, abstrmostoutterparams>=abstdecloutterparams)

(?<abstrdecloptrestaltparams>(?&abstrmostoutterparams)(?&abstrsubs)*+|(?C&identifier_decl)(?&abstrsubs)++)

(?<abstrdecloptrestparams>(?&abstrmostoutterparamsfacet)?+(?&abstrsubsfacet)*+)

(?<Tabstrdeclinside>)(?<abstrcommonoutter>[(](?<cc>((?&callingconv))?+)(?&Tabstrdeclinside)(?C81)[)])

(?<abstrmostoutteropt>\s*+(?&callingconv)?+(?&abstrcommonoutter<abstdecloptoutter>)\s*+)

(?<abstrmostoutter>\s*+(?&callingconv)?+((?&abstrcommonoutter<abstdecloutter>)|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+(?>(?&abstrcommonoutter<abstdecloutterparams>)|(?&identifierminedecl)|(?C&identifier_decl))\s*+)

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tabsqualifs, Tdecl>)
(?<abstdeclorallqualifssingle>
				(?(DEFINE)
					(?&&Tabsqualifs)
				)
				(?<#restrictoutsidefacet>(?&&Tabsqualifsfacet)(?!(?&Tdecl)(?C&enddeclaration))
				|(?&Tabsqualifs)(?&Tdeclfacet)(?C&endqualifs))
				|(?&Tabsqualifsfacet)(?&declfacet))

(?<Tabsqualifs, Tasbtdecloutter, Tabstinitorbitfl>)
(?<abstdeclorallqualifs>
		(?(DEFINE)(?&&decl<Tasbtdecloutter, Tabstinitorbitfl>)
			(?<declcomma>,(?&decl))
			(?&abstdeclorallqualifssingle<Tabsqualifs, decl>=declsingle)
		)
		(?<#restrictoutsidefacet>
				(?&declsingle)|
				(?<restoutter>(?=(?&&Tabsqualifsfacet)(?&declfacet)
				(?<rest>(?(<rest>)\g{rest}),(?&decl)(?C&enddeclaration)))
				((?&Tabsqualifs)(?&declfacet)\g{rest}(?C&endqualifs)
				|(?&restoutter))))
				|(?&Tabsqualifsfacet)(?&declfacet)(?&declcommafacet)*+)


(?<Tasbtdecloutter, Tabstinitorbitfl>)
(?<decl>(?&Tasbtdecloutter)
			(?&Tabstinitorbitfl)?)

(?<decloptorfndef>(?&typenameinsideopt)\s*+;\s*+|(?&typenameinsideoptfndef)(?&compoundstatement))

(?&abstdeclorallqualifs<allqualifsdecl*+, abstdecloutter, abstrinitialization>=typenameinsideopt)

(?&abstdeclorallqualifs<allqualifsdecl++, abstdecloutter, abstrinitialization>=typenameinsidedecl)

(?<declnormal>(?&typenameinsidedecl)\s*+;\s*+)

(?&abstdeclorallqualifssingle<allqualifsparam++, abstdecloutterparams>=typenameinsideparams)

(?&abstdeclorallqualifssingle<allqualifsdecl*+, abstdecloutter>=typenameinsideoptfndef)

(?&abstdeclorallqualifs<allqualifsparam++, abstdecloutterparams, abstrbitfield>=typenamebitfl)

(?<identifierminedecl>\s*+
		(?!(?&keywordlist))
		(?<ident>(?&identifierrawfacet))(?C&identifier_decl)
		\s*+)

(?<identifierminetypedef#restrictpcre2only>\s*+(?!(?&keywordlist))(?<typedefnmmatched>(?<typedefnmfacet>(?&identifierrawfacet))(??C&identifier_typedef))\s*+)
(?<identifierminetypedef#restrictperlonly>\s*+\b(?<typedefnmmatched>(?<facetarg>(*F))|(??C&identifier_typedef))\b\s*+)

(?<keywordlist>(?&callingconv)|(?&typesandqualifiersmask)|\b(typedef|struct|union|enum|sizeof|break|case|continue|default|do|else|for|goto|if|return|switch|while)\b)

(?<typenamerev>(?<#restrictoutsidefacet>(?&typenamefacet)(?!(?&castexpr)))|(?&typename)(?C&applycast)(?&castexprfacet))


(?<abstrbitfield>\s*+:\s*+(?&assignorsomething))
(?<designator>\s*+(\[(?&primexpr)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)(?C95)|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?&initializer))

(?<calloutid>)
(?<identifiermine>\s*+(?!(?&keywordlist))(?<identlasttagfacet>(?&identifierrawfacet))(?C&calloutid)\s*+)

(?<structorunion>\s*+(?<structorunionlast>\b(struct|union|(?<enumfacet>enum))\b)
	((?&&identifierminestruct)?+\s*+[{](?(<enumfacet>)(?C&begin_enumerator_def)
	(?<enumerator>(?&&identifiermine<add_ident_to_enum_def>)
	((=(?C&beginconstantexpr)(?&assignorsomething)(?C&end_ass_to_enum_def))
	|(?C&end_without_ass_to_enum_def)))?+(,(?&enumerator))*+,?+\s*+
	|(?C&struc_or_union_body)\s*+((?&typenamebitfl)\s*+;\s*+)*+)
	[}](?(<enumfacet>)()|(?C&endbuildingstructorunion))\s*+
|(?&&identifierminestruct)(?C&add_tag))(?#|(?&&enum)))

(?<structoruniondecl>(?=(?&stuctdeclfacet)(?C&identifier_decl))(?<stuctdecl>(?&structorunion)\s*+;\s*+))


(?<identifierminestruct>\s*+(?!(?&keywordlist))(?<identlasttag>(?&identifierrawfacet))\s*+)
(?#C42)
(?<declninitopt>(?&typenameinsidedeclfacet)(?&abstrinitialization)?+)
(?<declaration>((?&declninitoptfacet)(?!)
			(,(?#C43)(?&abstdecloutter)(?#C42)(?&abstrinitialization)?+)*+\s*+;\s*+))

(,(?&abstdecloutter)(?&abstrinitialization)?+)*+