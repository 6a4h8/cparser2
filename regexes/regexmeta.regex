
    (?<openpar>[(](?<![)])) (?# for ease with VSCode bracket calculations)
    
    (?<sub>[(][?]<(\[?+)(?{$matches[-1]->{square}=$^N})(?<namesub>\w++)(?(?{evalval sub{$matches[-1]->{square}}})\])>
        (?{call "regbeginsub"})(?{call2 "argsreset"})
        ([{]((\w++),(?{call2 "argsappend"}))*+})?+(?&regex)[)]
    (?{call "regfinishsub"}))

    (?<group>[(](?![&*])(?![?][^>])(([?][>])?+)
        (?{$matches[-1]->{atomic}=$^N})(?{call "regbegingroup"})(?&regex)[)]
    (?{call "regfinishgroup"}))

    (?<call>[(][?]
        ((&?+(<?+)(?{$matches[-1]->{angular}=$^N})))(?{$matches[-1]->{ampersand}=$^N})
        (\w++)(?{$matches[-1]->{callee}=$^N})(?(?{evalval sub{$matches[-1]->{angular}}})>(?{call2 "regbeginsubcall"}))(?{call "regcall"})(?{call2 "argsreset"})
        (?(?{evalval sub{$matches[-1]->{ampersand}}})([(](\w++)(?{call2 "argsappend"})
        (,(\w++)(?{call2 "argsappend"}))*+[)])?+)[)]
    (?(?{evalval sub{$matches[-1]->{angular}}})(?{call "regfinishsub"})))

    (?<lookaround>[(][?]([!=])(?{$matches[-1]->{sign}=$^N})
        (?{call "regbeginlookaround"})(?&regex)[)]
        (?{call "regfinishlookaround"}))

    (?<char>(?(?=\\)\\([^g])(?{$matches[-1]->{escape}=$^N})
        |([^\[\]?*+{()}|\\])(?{$matches[-1]->{from}=$^N}))(?{call "regchar"}))

    (?<backreference>\\g[{](?<namebackref>\w++)[}](?{call "regbackref"}))

    (?<optional>-([^]\\])(?{$matches[-1]->{to}=$^N})(?{call "regchar"})|-\\([^]])(?{$matches[-1]->{escape}=$^N}))

    (?<sequence>\[(\^?+)(?{$matches[-1]->{not}=$^N})(?{call "regbeginseq"})
        (([^\\])(?{$matches[-1]->{from}=$^N})
        |\\(.)(?{$matches[-1]->{escape}=$^N}))(?&optional)?+
        ((([^]])(?{$matches[-1]->{from}=$^N})|\\(.)(?{$matches[-1]->{escape}=$^N}))(?&optional)?+)*+\]
    (?{call "regfinishseq"}))

    (?<conditional>[(][?](?(?=(?&openpar)[^<])
    (?{set2 {"savedcallouts" => []}})(?&lookaround)
    |(?{set2 {"savedcallouts" => []}})[(]<(\w++)>[)](?{$matches[-1]->{nametocheck}=$^N})(?{call "regcheckname"}))
    (?{set2 {"savedcallouts" => []}})(?&regexpart)(?{call2 "regbranch"})(?&regexor)[)](?{call2 "regend"}))

    (?<verb>[(][*](?<verb>[A-Z]++)[)](?{call "regverb"}))

    (?<regexinner>(?{set2 {'savedcallouts' => []}})(?(?=(?<match>(?&conditional)))
    \g{match}|(?(?=(?<match>(?&lookaround)))
    \g{match}|(?(?=(?<match>(?&call)))
    \g{match}|(?(?=(?<match>(?&sub)))
    \g{match}|(?(?=(?<match>(?&verb)))
    \g{match}|(?(?=(?<match>(?&sequence)))
    \g{match}|(?(?=(?<match>(?&group)))
    \g{match}|(?(?=(?<match>(?&backreference)))
    \g{match}|(?(?=(?<match>(?&char)))
    \g{match}|(*F)
    )))))))))(([*+?][+?]?+)?+)(?{$matches[-1]->{quantifiers}=$^N})(?{call2 "regendinner"}))

    (?<regexpart>(?(?=(?<reinner>((?{set2 {"matches" => {}}})(?&regexinner)(?{unset2 "matches"}))++))\g{reinner}|(?{call "regnothing"})))

    (?<regexor>([|](?{set2 {"savedcallouts" => []}})(?&regexpart)(?{call2 "regbranch"}))*+)

    (?<regex>(?{set2 {"savedcallouts" => []}})(?&regexpart)(?&regexor)(?{call2 "regend"}))